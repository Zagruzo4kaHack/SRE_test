# Теперь мы добавим описание манифеста HPA, чтобы Kubernetes автоматически масштабировал количество реплик в зависимости от нагрузки
apiVersion: autoscaling/v2beta2
kind: HorizontalPodAutoscaler
metadata:
  name: web-application-hpa
spec:
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: web-application
  minReplicas: 4
  maxReplicas: 10
  metrics:
  - type: Resource
    resource:
      name: cpu
      targetAverageUtilization: 50
      # настройка среднего использования CPU для автоматического масштабирования
      # В этом манифесте мы указываем, что минимальное количество реплик равно 4, а максимальное — 10. Мы также устанавливаем метрику для автоматического масштабирования на основе использования CPU в 50%.
      # Таким образом, что мы получаем:
      #- Отказоустойчивость за счет минимального количества реплик 4 и возможности масштабирования до 10 в зависимости от нагрузки
      #- Управление ресурсами, где приложение в начале требует 4 CPU на каждый под, но в дальнейшем потребление ровное приблизительно 0.1 CPU
      #- Задержки в readinessProbe и livenessProbe учитывают время инициализации и готовности приложения

      #Кроме этого, кластер Kubernetes сам по себе обеспечивает отказоустойчивость за счет мультизональной настройки, поэтому у нас есть полная отказоустойчивость на уровне кластера